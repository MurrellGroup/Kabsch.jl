var documenterSearchIndex = {"docs":
[{"location":"#Kabsch","page":"Home","title":"Kabsch","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for Kabsch.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#Kabsch.centered","page":"Home","title":"Kabsch.centered","text":"centered(P)\n\nReturn the point set P centered at the origin, allowing for batch dimensions.\n\n\n\n\n\n","category":"function"},{"location":"#Kabsch.centroid-Tuple{AbstractArray{<:Number}}","page":"Home","title":"Kabsch.centroid","text":"centroid(P)\n\nReturn the centroid of a point set P, reducing the second array dimension with Statistics.mean, allowing for batch dimensions.\n\n\n\n\n\n","category":"method"},{"location":"#Kabsch.kabsch-Tuple{AbstractArray{<:Number}, AbstractArray{<:Number}}","page":"Home","title":"Kabsch.kabsch","text":"kabsch(P, Q)\n\nReturns a rotation matrix R, and centroids of P and Q, where rmsd is minimized between a centered P and R applied to a centered Q.\n\njulia> using Manifolds\n\njulia> Q = randn(3, 4);\n\njulia> P = rand(Rotations(3)) * centered(Q) .+ randn(3);\n\njulia> R, Pₜ, Qₜ = kabsch(P, Q);\n\njulia> (P .- Pₜ) ≈ R * (Q .- Qₜ)\ntrue\n\n\n\n\n\n","category":"method"},{"location":"#Kabsch.rmsd-Tuple{AbstractMatrix{<:Number}, AbstractMatrix{<:Number}}","page":"Home","title":"Kabsch.rmsd","text":"rmsd(P, Q)\n\nReturn the Root Mean Square Deviation between two paired sets of points. Note that this method does not align the two sets by itself.\n\njulia> P = randn(3, 4);\n\njulia> rmsd(P, P) == 0\ntrue\n\njulia> rmsd(P, P .+ 1) == √3\ntrue\n\n\n\n\n\n","category":"method"},{"location":"#Kabsch.rmsd-Tuple{typeof(superimposed), Any, Any}","page":"Home","title":"Kabsch.rmsd","text":"rmsd(::typeof(superimposed), P, Q)\n\nReturn the superimposed Root Mean Square Deviation between P and Q.\n\njulia> using Manifolds\n\njulia> Q = randn(3, 4);\n\njulia> P = rand(Rotations(3)) * centered(Q) .+ randn(3);\n\njulia> isapprox(rmsd(superimposed, Q, P), 0, atol=1e-10)\ntrue\n\n\n\n\n\n","category":"method"},{"location":"#Kabsch.superimposed-Tuple{AbstractArray{<:Number}, AbstractArray{<:Number}}","page":"Home","title":"Kabsch.superimposed","text":"superimposed(Q, P)\n\nReturns Q superimposed on P.\n\njulia> using Manifolds\n\njulia> Q = randn(3, 4);\n\njulia> P = rand(Rotations(3)) * centered(Q) .+ randn(3);\n\njulia> superimposed(Q, P) ≈ P\ntrue\n\n\n\n\n\n","category":"method"}]
}
